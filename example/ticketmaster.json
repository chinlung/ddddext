{
    "homepage": "https://ticketmaster.sg/activity/detail/24sg_lisafanmeet",
    "refresh_datetime": "",
    "ocr_captcha": {
        "enable": false,
        "beta": true,
        "force_submit": true,
        "captcha": [
            {
                "enable": true,
                "url": "",
                "captcha": "",
                "input": "",
                "maxlength": "4"
            }
        ]
    },
    "advanced": {
        "chrome_extension": true,
        "adblock": true,
        "hide_some_image": true,
        "block_facebook_network": true,
        "headless": false,
        "verbose": false,
        "remote_url": "\"http://127.0.0.1:16888/\"",
        "proxy_server_port": "",
        "play_sound_filename": "sound_ding-dong.wav",
        "window_size": "480,1024"
    },
    "autofill": [
        {
            "enable": true,
            "url": "https://main.login.ticketmaster.sg/login?*",
            "selector": "#signInFormUsername",
            "value": "yourname@gmail.com"
        },
        {
            "enable": true,
            "url": "https://main.login.ticketmaster.sg/login?*",
            "selector": "#signInFormPassword",
            "value": "your-password"
        }
    ],
    "autocheck": [
        {
            "enable": true,
            "url": "",
            "selector": "",
            "value": false
        }
    ],
    "injectjs": [
        {
            "enable": true,
            "url": "https://*/activity/detail/*",
            "script": "const currentUrl = window.location.href; \nconst event_code = currentUrl.split('/')[5];\nif(event_code){\n    const domain = currentUrl.split('/')[2];\n    const new_url = \"https://\"+ domain +\"/activity/game/\"+ event_code;\n    location.href=new_url;\n}\n",
            "run_at": "document_end",
            "world": "ISOLATED"
        },
        {
            "enable": true,
            "url": "https://ticketmaster.sg/ticket/area/*",
            "script": "let ticket_number=2;\nfunction ticketmaster_assign_ticket_number(ticket_number) {\n    let is_ticket_number_assign = false;\n    let ticket_options = $(\"#ticketPriceList select:first option\");\n    if (ticket_options.length > 1) {\n        const first_option = ticket_options.first();\n        if (ticket_number > 0 && first_option.prop('selected') && first_option.prop('value') == '0') {\n            ticket_options.each(function() {\n                if ($(this).val() == ticket_number) {\n                    $(this).prop('selected', true);\n                    is_ticket_number_assign = true;\n                    return false;\n                }\n            });\n            if (!is_ticket_number_assign) {\n                ticket_options.last().prop('selected', true);\n                is_ticket_number_assign = true;\n            }\n            if (is_ticket_number_assign) {\n                // PS: click too fast will be detected.\n                setTimeout(() => {\n                    $(\"#autoMode\").click();\n                }, 100);\n            }\n        }\n    }\n    return is_ticket_number_assign;\n}\nsetInterval(() =>\n{\n    ticketmaster_assign_ticket_number(ticket_number);\n}, 100);",
            "run_at": "document_end",
            "world": "ISOLATED"
        },
        {
            "enable": true,
            "url": "https://ticketmaster.sg/ticket/check-captcha/*",
            "script": "$('input[type=checkbox]').each(function() {\n    $(this).prop('checked', true);\n});\n$(\"img[style='width: 100%; padding: 0;']\").remove();\n$(\"footer\").remove();\n\nvar ticketmaster_ocr_interval = null;\nvar ticketmaster_ocr_config = {\n    captcha_length: 4,\n    captcha_selector: \"#TicketForm_verifyCode-image\",\n    captcha_renew_selector: \"#TicketForm_verifyCode-image\",\n    input_selector: \"#TicketForm_verifyCode\",\n    submit_selector: \"button[type='submit']\"\n};\nfunction get_ticketmaster_ocr_image() {\n    // due to multi format\n    let captcha_selector = ticketmaster_ocr_config.captcha_selector;\n    \n    let image_data = \"\";\n    //console.log(captcha_selector);\n    let img = document.querySelector(captcha_selector);\n    if (img != null) {\n        let canvas = document.createElement('canvas');\n        let context = canvas.getContext('2d');\n        canvas.height = img.naturalHeight;\n        canvas.width = img.naturalWidth;\n        context.drawImage(img, 0, 0);\n        let img_data = canvas.toDataURL();\n        if (img_data) {\n            image_data = img_data.split(\",\")[1];\n            //console.log(image_data);\n        }\n    } else {\n        // console.log(\"img not found:\" + tzuchi_ocr_config.captcha_selector);\n    }\n    return image_data;\n}\n\nvar last_ticketmaster_captcha_answer = \"\";\nchrome.runtime.onMessage.addListener((message) => {\n    let captcha_renew_selector = ticketmaster_ocr_config.captcha_renew_selector;\n\n    //console.log('sent from background', message);\n    if (message && message.hasOwnProperty(\"answer\")) {\n        let is_valid_anwser = false;\n        if (message.answer.length == ticketmaster_ocr_config.captcha_length) {\n            is_valid_anwser = true;\n        }\n        //console.log(is_valid_anwser);\n        if (is_valid_anwser) {\n            ticketmaster_set_ocr_answer(message.answer);\n            last_ticketmaster_captcha_answer = message.answer;\n        } else {\n            // renew captcha.\n            if (last_ticketmaster_captcha_answer != message.answer) {\n                last_ticketmaster_captcha_answer = message.answer;\n                console.log(\"renew captcha: \" + captcha_renew_selector);\n                if ($(captcha_renew_selector).length) {\n                    $(captcha_renew_selector).click();\n                }\n                ticketmaster_area_main();\n            }\n        }\n    }\n});\n\nfunction ticketmaster_set_ocr_answer(answer) {\n    let input_selector = ticketmaster_ocr_config.input_selector;\n    let submit_selector = ticketmaster_ocr_config.submit_selector;\n    //console.log(\"answer:\"+answer);\n    if (answer.length > 0) {\n        let sendkey_by_webdriver = false;\n        if (settings) {\n            if (settings.hasOwnProperty(\"token\")) {\n                sendkey_by_webdriver = true;\n            }\n        }\n        //console.log(\"sendkey_by_webdriver:\"+sendkey_by_webdriver);\n        if (!sendkey_by_webdriver) {\n            // solution #1: javascript.\n            $(input_selector).val(answer);\n            $(submit_selector).click();\n        } else {\n            // solution #2: click webdriver.\n            webdriver_location_sendkey(settings, input_selector, answer, document.location.href);\n            webdriver_location_click(settings, submit_selector, document.location.href);\n            $(input_selector).val(answer);\n            $(submit_selector).click();\n        }\n    }\n}\n\nasync function ticketmaster_get_ocr_answer(api_url, image_data) {\n    let bundle = {\n        action: 'ocr',\n        data: {\n            'url': api_url + 'ocr',\n            'image_data': image_data,\n        }\n    };\n    const return_answer = await chrome.runtime.sendMessage(bundle);\n}\n\nfunction ticketmaster_orc_image_ready(api_url) {\n    let ret = false;\n    let image_data = get_ticketmaster_ocr_image();\n    if (image_data.length > 0) {\n        ret = true;\n        if (ticketmaster_ocr_interval) clearInterval(ticketmaster_ocr_interval);\n        ticketmaster_get_ocr_answer(api_url, image_data);\n    }\n    //console.log(\"orc_image_ready:\"+ret);\n    return ret;\n}\n\nfunction ticketmaster_area_main() {\n    let remote_url_string = get_remote_url(settings);\n    ticketmaster_ocr_interval = setInterval(() => {\n        chrome.storage.local.get('status', function(items) {\n            if (items.status && items.status == 'ON') {\n                ticketmaster_orc_image_ready(remote_url_string);\n            } else {\n                console.log('ddddext status is not OFF');\n            }\n        });\n    }, 100);\n}\n\nvar settings;\nchrome.storage.local.get('settings', function(items) {\n    if (items.settings) {\n        settings = items.settings;\n        ticketmaster_area_main();\n    }\n});\n",
            "run_at": "document_end",
            "world": "ISOLATED"
        },
        {
            "enable": true,
            "url": "https://*/ticket/ticket/*",
            "script": "var ticket_number = 2;\nvar exclude_keyword_array = [];\nvar price_keyword_array = [];\n\n$('input[type=checkbox]').each(function() {\n    $(this).prop('checked', true);\n});\n$(\"img[style='width: 100%; padding: 0;']\").remove();\n$(\"footer\").remove();\n\nvar ticketmaster_ocr_interval = null;\nvar ticketmaster_ocr_config = {\n    captcha_length: 4,\n    captcha_selector: \"#TicketForm_verifyCode-image\",\n    captcha_renew_selector: \"#TicketForm_verifyCode-image\",\n    input_selector: \"#TicketForm_verifyCode\",\n    submit_selector: \"button[type='submit']\"\n};\n\nfunction get_ticketmaster_ocr_image() {\n    // due to multi format\n    let captcha_selector = ticketmaster_ocr_config.captcha_selector;\n\n    let image_data = \"\";\n    //console.log(captcha_selector);\n    let img = document.querySelector(captcha_selector);\n    if (img != null) {\n        let canvas = document.createElement('canvas');\n        let context = canvas.getContext('2d');\n        canvas.height = img.naturalHeight;\n        canvas.width = img.naturalWidth;\n        context.drawImage(img, 0, 0);\n        let img_data = canvas.toDataURL();\n        if (img_data) {\n            image_data = img_data.split(\",\")[1];\n            //console.log(image_data);\n        }\n    } else {\n        // console.log(\"img not found:\" + tzuchi_ocr_config.captcha_selector);\n    }\n    return image_data;\n}\n\nvar last_ticketmaster_captcha_answer = \"\";\nchrome.runtime.onMessage.addListener((message) => {\n    let captcha_renew_selector = ticketmaster_ocr_config.captcha_renew_selector;\n\n    //console.log('sent from background', message);\n    if (message && message.hasOwnProperty(\"answer\")) {\n        let is_valid_anwser = false;\n        if (message.answer.length == ticketmaster_ocr_config.captcha_length) {\n            is_valid_anwser = true;\n        }\n        //console.log(is_valid_anwser);\n        if (is_valid_anwser) {\n            ticketmaster_set_ocr_answer(message.answer);\n            last_ticketmaster_captcha_answer = message.answer;\n        } else {\n            // renew captcha.\n            if (last_ticketmaster_captcha_answer != message.answer) {\n                last_ticketmaster_captcha_answer = message.answer;\n                console.log(\"renew captcha: \" + captcha_renew_selector);\n                if ($(captcha_renew_selector).length) {\n                    $(captcha_renew_selector).click();\n                }\n                ticketmaster_ticket_main();\n            }\n        }\n    }\n});\n\nfunction checkall() {\n    $('input[type=checkbox]:not(:checked)').each(function() {\n        $(this).click();\n    });\n}\n\nfunction ticketmaster_set_ocr_answer(answer) {\n    let input_selector = ticketmaster_ocr_config.input_selector;\n    let submit_selector = ticketmaster_ocr_config.submit_selector;\n    //console.log(\"answer:\"+answer);\n    if (answer.length > 0) {\n        let sendkey_by_webdriver = false;\n        if (settings) {\n            if (settings.hasOwnProperty(\"token\")) {\n                sendkey_by_webdriver = true;\n            }\n        }\n        checkall();\n        //console.log(\"sendkey_by_webdriver:\"+sendkey_by_webdriver);\n        if (!sendkey_by_webdriver) {\n            // solution #1: javascript.\n            $(input_selector).val(answer);\n            $(submit_selector).click();\n        } else {\n            // solution #2: click webdriver.\n            webdriver_location_sendkey(settings, input_selector, answer, document.location.href);\n            //webdriver_location_click(settings, submit_selector, document.location.href);\n            $(input_selector).val(answer);\n            $(submit_selector).click();\n        }\n    }\n}\n\nasync function ticketmaster_get_ocr_answer(api_url, image_data) {\n    let bundle = {\n        action: 'ocr',\n        data: {\n            'url': api_url + 'ocr',\n            'image_data': image_data,\n        }\n    };\n    const return_answer = await chrome.runtime.sendMessage(bundle);\n}\n\nfunction ticketmaster_ticketPriceList_clean_exclude(exclude_keyword_array) {\n    for (let i = 0; i < exclude_keyword_array.length; i++) {\n        $(\"#ticketPriceList > tbody > tr\").each(function() {\n            let html_text = $(this).text();\n            //console.log(\"html:\"+html_text);\n            if (html_text.indexOf(exclude_keyword_array[i]) > -1) {\n                $(this).remove();\n            }\n        });\n    }\n}\n\nfunction ticketmaster_ticketPriceList_ticket_number(price_keyword_array, ticket_number) {\n    let is_ticket_number_assign = false;\n\n    let target_row = null;\n    let all_row = $(\"#ticketPriceList > tbody > tr\");\n    if (all_row.length > 0) {\n        if (all_row.length == 1) {\n            // single select.\n            target_row = all_row;\n        } else {\n            // multi select.\n            all_row.each(function() {\n                let is_match_keyword = false;\n                if (price_keyword_array.length) {\n                    let html_text = $(this).text();\n                    for (let i = 0; i < price_keyword_array.length; i++) {\n                        if (price_keyword_array[i].indexOf(\" \") > -1) {\n                            // TODO: muti keywords with AND logic.\n                        } else {\n                            if (html_text.indexOf(price_keyword_array[i]) > -1) {\n                                is_match_keyword = true;\n                                target_row = $(this);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    if (all_row.index(this) == 0) {\n                        is_match_keyword = true;\n                        target_row = $(this);\n                    }\n                }\n                //console.log(\"is_match_keyword:\"+is_match_keyword);\n                if (is_match_keyword) {\n                    return;\n                }\n            });\n        }\n\n        let ticket_options = target_row.find(\"option\");\n        if (ticket_options.length) {\n            const first_option = ticket_options.first();\n\n            if (ticket_number > 0 && first_option.prop('selected') && first_option.prop('value') == '0') {\n                ticket_options.each(function() {\n                    if ($(this).val() == ticket_number) {\n                        $(this).prop('selected', true);\n                        is_ticket_number_assign = true;\n                        return false;\n                    }\n                });\n            }\n            if (!is_ticket_number_assign) {\n                ticket_options.last().prop('selected', true);\n            }\n        }\n    }\n    return is_ticket_number_assign;\n}\n\nfunction ticketmaster_orc_image_ready(api_url) {\n    let ret = false;\n    let image_data = get_ticketmaster_ocr_image();\n    if (image_data.length > 0) {\n        ret = true;\n        if (ticketmaster_ocr_interval) clearInterval(ticketmaster_ocr_interval);\n        ticketmaster_get_ocr_answer(api_url, image_data);\n    }\n    //console.log(\"orc_image_ready:\"+ret);\n    return ret;\n}\n\nfunction ticketmaster_ticket_main() {\n    let remote_url_string = get_remote_url(settings);\n    ticketmaster_ocr_interval = setInterval(() => {\n        chrome.storage.local.get('status', function(items) {\n            if (items.status && items.status == 'ON') {\n                ticketmaster_orc_image_ready(remote_url_string);\n            } else {\n                console.log('ddddext status is not OFF');\n            }\n        });\n    }, 100);\n}\n\nvar settings;\nchrome.storage.local.get('settings', function(items) {\n    if (items.settings) {\n        settings = items.settings;\n        ticketmaster_ticketPriceList_clean_exclude(exclude_keyword_array);\n        ticketmaster_ticketPriceList_ticket_number(price_keyword_array, ticket_number);\n        ticketmaster_ticket_main();\n    }\n});",
            "run_at": "document_end",
            "world": "ISOLATED"
        },
        {
            "enable": true,
            "url": "https://*/activity",
            "script": "window.location.href=\"https://ticketmaster.sg/activity/game/24sg_lisafanmeet\"",
            "run_at": "document_end",
            "world": "ISOLATED"
        },
        {
            "enable": true,
            "url": "https://*/activity/game/*",
            "script": "var date_keyword_array = []; // \u65e5\u671f\u95dc\u9375\u5b57\nvar date_order_mode = \"random\"; // \u65e5\u671f\u6392\u5e8f\u65b9\u5f0f\nvar user_auto_reload_page_interval = 0.1; // \u81ea\u52d5\u5237\u65b0\u9801\u9762\u9593\u9694(\u79d2)\nvar user_auto_reload_overheat_count = 4; // \u6bcf2.5\u79d2\u6700\u591a\u53ef\u4ee5\u5237\u65b0\u6b21\u6578\nvar user_auto_reload_overheat_cd = 1.0; // \u9054\u6210\u6700\u591a\u5237\u65b0\u6b21\u6578\u7684\u51b7\u78ba\u6642\u9593(\u79d2)\n$(\"div.masthead-wrap\").remove();\nfunction date_clean() {\n    remove_list = ['Currently Unavailable',\n        'Sale ended on 20',\n        'Sold out',\n        '\u66ab\u505c\u8ca9\u552e',\n        ':00 \u622a\u6b62',\n        '\u5df2\u552e\u5b8c',\n        '00\u306b\u767a\u58f2\u7d42\u4e86',\n        '\u8ca9\u58f2\u4e00\u6642\u4e2d\u6b62',\n        '\u5b8c\u58f2\u3057\u305f'\n    ];\n    for (let i = 0; i < remove_list.length; i++) {\n        $(\"#gameList td:contains('\" + remove_list[i] + \"')\").each(function() {\n            $(this).parent().remove();\n        });\n    }\n}\n\nfunction gameList_keyword(date_keyword_array, date_order_mode) {\n    let target_date = null;\n    if (date_keyword_array.length) {\n        for (let i = 0; i < date_keyword_array.length; i++) {\n            let query_string = \"#gameList td:contains('\" + date_keyword_array[i] + \"')\";\n            if (date_keyword_array[i] == \"\") {\n                query_string = \"#gameList td\"\n            }\n            let matched_block = [];\n            $(query_string).each(function() {\n                matched_block.push($(this));\n            });\n            target_date = get_target_item_with_order(date_order_mode, matched_block);\n            if (target_date) {\n                console.log(\"match keyword:\" + date_keyword_array[i]);\n                break;\n            }\n        }\n    } else {\n        let query_string = \"#gameList td\";\n        let matched_block = [];\n        $(query_string).each(function() {\n            matched_block.push($(this));\n        });\n        target_date = get_target_item_with_order(date_order_mode, matched_block);\n    }\n\n    if (target_date) {\n        let button_tag = \"button\";\n        const currentUrl = window.location.href;\n        const domain = currentUrl.split('/')[2];\n        if (domain == \"ticketmaster.sg\") {\n            button_tag = \"a\";\n        }\n\n        let link = target_date.parent().find(button_tag).attr(\"data-href\");\n        if (link) {\n            //console.log(\"link: \" + link);\n            clearInterval(gameInterval);\n            window.location.href = link;\n        }\n    } else {\n        //console.log(\"not target_date found.\")\n    }\n}\n\nasync function do_reload_if_not_overheat(user_auto_reload_page_interval, auto_reload_overheat_count, auto_reload_overheat_cd) {\n    let auto_reload_page_interval = user_auto_reload_page_interval;\n    chrome.storage.local.get('last_reload_timestamp', function(items) {\n        if (items.last_reload_timestamp) {\n            let new_timestamp = [];\n            const now = new Date().getTime();\n            const overheat_second = 2.5;\n            //for (let i = items.last_reload_timestamp.length - 1; i >= 0; i--) {\n            for (let i = 0; i < items.last_reload_timestamp.length; i++) {\n                let each_time = items.last_reload_timestamp[i];\n                let current_diff = now - each_time;\n                if (current_diff <= overheat_second * 1000) {\n                    //last_reload_timestamp.splice(i, 1);\n                    new_timestamp.push(each_time);\n                }\n            }\n            if (new_timestamp.length >= auto_reload_overheat_count) {\n                console.log(\"overheat, slow down!\");\n                auto_reload_page_interval = auto_reload_overheat_cd;\n            }\n            new_timestamp.push(now);\n            chrome.storage.local.set({\n                last_reload_timestamp: new_timestamp\n            });\n            if (auto_reload_page_interval == 0) {\n                //console.log('Start to reload now.');\n                location.reload();\n            } else {\n                //console.log('We are going to reload after few seconeds.');\n                setTimeout(function() {\n                    location.reload();\n                }, auto_reload_page_interval * 1000);\n            }\n        }\n    });\n}\n\nfunction date_auto_reload() {\n    let reload = false;\n\n    let button_tag = \"button\";\n    const currentUrl = window.location.href;\n    const domain = currentUrl.split('/')[2];\n    if (domain == \"ticketmaster.sg\") {\n        button_tag = \"a\";\n    }\n\n    const query_string = \"#gameList \" + button_tag;\n    if ($(query_string).length) {\n        date_clean();\n        if ($(query_string).length) {\n            if (settings) {\n                gameList_keyword(date_keyword_array, date_order_mode);\n            }\n        } else {\n            reload = true;\n        }\n    } else {\n        reload = true;\n    }\n\n    if (reload) {\n        if (settings) {\n            do_reload_if_not_overheat(user_auto_reload_page_interval, user_auto_reload_overheat_count, user_auto_reload_overheat_cd);\n        }\n    }\n}\n\nvar settings;\nchrome.storage.local.get('settings', function(items) {\n    if (items.settings) {\n        settings = items.settings;\n    }\n});\n\nvar gameInterval = setInterval(() => {\n    chrome.storage.local.get('status', function(items) {\n        if (items.status && items.status == 'ON') {\n            date_auto_reload();\n        } else {\n            //console.log('maxbot status is not OFF');\n        }\n    });\n}, 100);\n",
            "run_at": "document_end",
            "world": "ISOLATED"
        },
        {
            "enable": true,
            "url": "https://*.com/ticket/area/*",
            "script": "var area_keyword_array = []; // \u5340\u57df\u95dc\u9375\u5b57\nvar area_order_mode = \"random\"; // \u5340\u57df\u6392\u5e8f\u65b9\u5f0f\nvar exclude_keyword_array = []; // \u6392\u9664\u95dc\u9375\u5b57\nvar user_auto_reload_page_interval = 0.1; // \u81ea\u52d5\u5237\u65b0\u9801\u9762\u9593\u9694(\u79d2)\nvar user_auto_reload_overheat_count = 4; // \u6bcf2.5\u79d2\u6700\u591a\u53ef\u4ee5\u5237\u65b0\u6b21\u6578\nvar user_auto_reload_overheat_cd = 1.0; // \u9054\u6210\u6700\u591a\u5237\u65b0\u6b21\u6578\u7684\u51b7\u78ba\u6642\u9593(\u79d2)\n\n$(\"ul.area-list > li:not(:has(a))\").remove();\n$(\"#selectseat div div img\").remove();\n$(\"footer\").remove();\n\nfunction tixcraft_area_clean_exclude(exclude_keyword_array) {\n    for (let i = 0; i < exclude_keyword_array.length; i++) {\n        $(\"ul.area-list > li > a:contains('\" + exclude_keyword_array[i] + \"')\").each(function() {\n            $(this).parent().remove();\n        });\n    }\n}\n\nfunction tixcraft_area_list_keyword(area_keyword_array, area_order_mode) {\n    // console.log(area_keyword_array);\n    let target_area = null;\n    if (area_keyword_array.length) {\n        for (let i = 0; i < area_keyword_array.length; i++) {\n            let query_string = \"ul.area-list > li > a:contains('\" + area_keyword_array[i] + \"')\";\n            if (area_keyword_array[i] == \"\") {\n                query_string = \"ul.area-list > li > a\"\n            }\n            let matched_block = [];\n            $(query_string).each(function() {\n                matched_block.push($(this));\n            });\n            target_area = get_target_item_with_order(area_order_mode, matched_block);\n            if (target_area.length) {\n                console.log(\"match keyword:\" + area_keyword_array[i]);\n                break;\n            }\n        }\n    } else {\n        let query_string = \"ul.area-list > li > a\";\n        let matched_block = [];\n        $(query_string).each(function() {\n            matched_block.push($(this));\n        });\n        target_area = get_target_item_with_order(area_order_mode, matched_block);\n    }\n\n    if (target_area) {\n        let link_id = target_area.attr(\"id\");\n        //console.log(\"link_id: \" + link_id);\n        if (link_id) {\n            let body = document.body.innerHTML;\n            let areaUrlList = null;\n            if (body.indexOf('var areaUrlList =') > -1) {\n                const javasrit_right = body.split('var areaUrlList =')[1];\n                let areaUrlHtml = \"\";\n                if (javasrit_right) {\n                    areaUrlHtml = javasrit_right.split(\"};\")[0];\n                }\n                if (areaUrlHtml.length > 0) {\n                    areaUrlHtml = areaUrlHtml + \"}\";\n                    areaUrlList = JSON.parse(areaUrlHtml);\n                }\n                //console.log(areaUrlHtml);\n            }\n\n            let new_url = null;\n            if (areaUrlList) {\n                let new_url = areaUrlList[link_id];\n                //console.log(new_url);\n                if (new_url && new_url.length > 0) {\n                    clearInterval(areaInterval);\n                    window.location.href = new_url;\n                }\n            }\n        }\n    } else {\n        console.log(\"not target_area found.\")\n    }\n}\n\nasync function do_reload_if_not_overheat(user_auto_reload_page_interval, auto_reload_overheat_count, auto_reload_overheat_cd) {\n    let auto_reload_page_interval = user_auto_reload_page_interval;\n    chrome.storage.local.get('last_reload_timestamp', function(items) {\n        if (items.last_reload_timestamp) {\n            let new_timestamp = [];\n            const now = new Date().getTime();\n            const overheat_second = 2.5;\n            //for (let i = items.last_reload_timestamp.length - 1; i >= 0; i--) {\n            for (let i = 0; i < items.last_reload_timestamp.length; i++) {\n                let each_time = items.last_reload_timestamp[i];\n                let current_diff = now - each_time;\n                if (current_diff <= overheat_second * 1000) {\n                    //last_reload_timestamp.splice(i, 1);\n                    new_timestamp.push(each_time);\n                }\n            }\n            if (new_timestamp.length >= auto_reload_overheat_count) {\n                console.log(\"overheat, slow down!\");\n                auto_reload_page_interval = auto_reload_overheat_cd;\n            }\n            new_timestamp.push(now);\n            chrome.storage.local.set({\n                last_reload_timestamp: new_timestamp\n            });\n            if (auto_reload_page_interval == 0) {\n                //console.log('Start to reload now.');\n                location.reload();\n            } else {\n                //console.log('We are going to reload after few seconeds.');\n                setTimeout(function() {\n                    location.reload();\n                }, auto_reload_page_interval * 1000);\n            }\n        }\n    });\n}\n\nfunction area_auto_reload() {\n    let reload = false;\n    if ($(\"ul.area-list > li:has(a)\").length) {\n        if (settings) {\n            tixcraft_area_clean_exclude(exclude_keyword_array);\n            tixcraft_area_list_keyword(area_keyword_array, area_order_mode);\n        }\n    } else {\n        reload = true;\n    }\n\n    console.log(reload);\n    if (reload) {\n        if (settings) {\n            do_reload_if_not_overheat(user_auto_reload_page_interval, user_auto_reload_overheat_count, user_auto_reload_overheat_cd);\n        }\n    }\n}\n\nvar settings;\nchrome.storage.local.get('settings', function(items) {\n    if (items.settings) {\n        settings = items.settings;\n    }\n});\n\nvar areaInterval = setInterval(() => {\n    chrome.storage.local.get('status', function(items) {\n        if (items.status && items.status == 'ON') {\n            area_auto_reload();\n        } else {\n            //console.log('maxbot status is not OFF');\n        }\n    });\n}, 100);",
            "run_at": "document_end",
            "world": "ISOLATED"
        }
    ],
    "cookie": [
        {
            "enable": true,
            "domain": "ticketmaster.sg",
            "key": "SID",
            "value": "",
            "path": "/",
            "http_only": true,
            "secure": true
        }
    ],
    "checkall": [
        {
            "enable": true,
            "url": ""
        }
    ],
    "memo": "// ==UserScript==\n// @name          ticketmaster auto submit\n// @include       https://ticketmaster.sg/*\n// @version       1.6\n// ==/UserScript==\n// \u7531\u65bc nodriver\u300c\u975e\u5e38\u4e0d\u7a69\u5b9a\u300d\uff0c \u9996\u9801\u5efa\u8b70\u8a2d\u70ba https://ticketmaster.sg/activity/detail/xxx \n// \u5982\u679c\u8a2d\u70ba https://ticketmaster.sg/ \u5728\u9078\u5f35\u6578\u7684\u7db2\u9801\u56fa\u5b9a\u6703\u639b\u6389\u3002\n\n\u8173\u672c\u7684\u4f7f\u7528\u65b9\u6cd5\uff1a\n* Step 1: \u8f38\u5165 cookie \u88e1\u7684 SID \u5167\u5bb9\u503c\u3002\n* Step 2: \u4fee\u6539 Javascript #2 \u88e1\u7684 ticket_number=\u6307\u5b9a\u5f35\u6578\uff0c\u9810\u8a2d\u503c\u662f 2\n* Step 3: \u6309\u300c\u6436\u7968\u300d\n\n\u76ee\u524d\u63d0\u4f9b\u7684 javascript \u6709\uff1a\n#1 /activity/detail/* \u529f\u80fd\u662f\uff1a\u7db2\u5740\u7684\u8df3\u8f49\u3002\n#2 /area/* \u529f\u80fd\u662f\uff1a\u8f38\u5165\u5f35\u6578\n#3 /ticket/check-captcha/* \u529f\u80fd\u662f\uff1a\u6253\u52fe\u2705\uff0c\u8f38\u5165\u9a57\u8b49\u78bc\uff0c\u6309\u4e0b\u9001\u51fa\u6309\u9215\u3002\n"
}